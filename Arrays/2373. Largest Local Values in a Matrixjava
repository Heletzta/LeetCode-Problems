// 2373. Largest Local Values in a Matrix

/*
https://leetcode.com/problems/largest-local-values-in-a-matrix/ 

You are given an n x n integer matrix grid.

Generate an integer matrix maxLocal of size (n - 2) x (n - 2) such that:

maxLocal[i][j] is equal to the largest value of the 3 x 3 matrix in grid centered around row i + 1 and column j + 1.
In other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid.

Return the generated matrix.

 

Example 1:


Input: grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]
Output: [[9,9],[8,6]]
Explanation: The diagram above shows the original matrix and the generated matrix.
Notice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid.
Example 2:


Input: grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]
Output: [[2,2,2],[2,2,2],[2,2,2]]
Explanation: Notice that the 2 is contained within every contiguous 3 x 3 matrix in grid.
 

Constraints:

n == grid.length == grid[i].length
3 <= n <= 100
1 <= grid[i][j] <= 100
*/

class Solution {
    public int[][] largestLocal(int[][] grid) {
        //Go through the big matrix -- in 3's
        // find the maximum in the 3x3 matrix

        int [][] maxLocal = new int[grid.length-2][grid.length-2];

        for (int i = 0; i < maxLocal.length; i++) {
            for (int j = 0; j < maxLocal.length; j++) {
                int max = grid[i][j];
                for (int k = 0; k < 3; k++) {
                    for (int p = 0; p < 3; p++) {
                        if (grid[i + k][j + p] > max) {
                            max = grid[i + k][j + p];
                        }
                    }
                }
                maxLocal[i][j] = max;
            }
        }
        return maxLocal;
    }
}

//Conversion:
// i = 0 and j = 0 for maxLocal
// in grid, the 3 x 3 matrix is from (0,0) to (2,2)

// i = 0, j = 1
// in grid, the 3 x 3 matrix is from (0, 1) to (2, 3)

// i = 1, j = 0
// in grid, the 3 x 3 matrix is from (1, 0) to (3, 2)



